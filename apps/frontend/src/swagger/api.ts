/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * Swagger Example 2.0
 * This is a sample server
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


import * as url from "url";
import * as portableFetch from "portable-fetch";
import { Configuration } from "./configuration";

const BASE_PATH = "https://localhost".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration?: Configuration;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = portableFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name = "RequiredError"
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 * @interface AssignRelevanceBody
 */
export interface AssignRelevanceBody {
    /**
     * Relevance Type
     * @type {string}
     * @memberof AssignRelevanceBody
     */
    type: string;
    /**
     * First Ids of Relevance
     * @type {Array<string>}
     * @memberof AssignRelevanceBody
     */
    firstIds?: Array<string>;
    /**
     * Second Ids of Relevance
     * @type {Array<string>}
     * @memberof AssignRelevanceBody
     */
    secondIds?: Array<string>;
    /**
     * Third Ids of Relevance
     * @type {Array<string>}
     * @memberof AssignRelevanceBody
     */
    thirdIds?: Array<string>;
}

/**
 * 
 * @export
 * @interface InlineResponse200
 */
export interface InlineResponse200 {
    /**
     * 
     * @type {Array<Relevance>}
     * @memberof InlineResponse200
     */
    assign?: Array<Relevance>;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse200
     */
    unassign?: number;
}

/**
 * 
 * @export
 * @interface Order
 */
export interface Order {
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    message?: string;
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    createdUser?: string;
    /**
     * 
     * @type {Date}
     * @memberof Order
     */
    createdDate?: Date;
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    updatedUser?: string;
    /**
     * 
     * @type {Date}
     * @memberof Order
     */
    updatedDate?: Date;
}

/**
 * 
 * @export
 * @interface OrderBody
 */
export interface OrderBody {
    /**
     * Order Message
     * @type {string}
     * @memberof OrderBody
     */
    message: string;
}

/**
 * 
 * @export
 * @interface Patient
 */
export interface Patient {
    /**
     * 
     * @type {string}
     * @memberof Patient
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof Patient
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof Patient
     */
    createdUser?: string;
    /**
     * 
     * @type {Date}
     * @memberof Patient
     */
    createdDate?: Date;
    /**
     * 
     * @type {string}
     * @memberof Patient
     */
    updatedUser?: string;
    /**
     * 
     * @type {Date}
     * @memberof Patient
     */
    updatedDate?: Date;
}

/**
 * 
 * @export
 * @interface PatientBody
 */
export interface PatientBody {
    /**
     * Patient Name
     * @type {string}
     * @memberof PatientBody
     */
    name: string;
}

/**
 * 
 * @export
 * @interface PatientOrderBody
 */
export interface PatientOrderBody {
    /**
     * Order Message
     * @type {string}
     * @memberof PatientOrderBody
     */
    message: string;
    /**
     * Specify which patient have the order
     * @type {string}
     * @memberof PatientOrderBody
     */
    patientId: string;
}

/**
 * 
 * @export
 * @interface PatientWithOrders
 */
export interface PatientWithOrders {
    /**
     * 
     * @type {string}
     * @memberof PatientWithOrders
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof PatientWithOrders
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof PatientWithOrders
     */
    createdUser?: string;
    /**
     * 
     * @type {Date}
     * @memberof PatientWithOrders
     */
    createdDate?: Date;
    /**
     * 
     * @type {string}
     * @memberof PatientWithOrders
     */
    updatedUser?: string;
    /**
     * 
     * @type {Date}
     * @memberof PatientWithOrders
     */
    updatedDate?: Date;
    /**
     * 
     * @type {Array<Order>}
     * @memberof PatientWithOrders
     */
    orders?: Array<Order>;
}

/**
 * 
 * @export
 * @interface ReassignRelevanceBody
 */
export interface ReassignRelevanceBody {
    /**
     * 
     * @type {ReassignRelevanceBodyAssign}
     * @memberof ReassignRelevanceBody
     */
    assign: ReassignRelevanceBodyAssign;
    /**
     * 
     * @type {ReassignRelevanceBodyReassign}
     * @memberof ReassignRelevanceBody
     */
    reassign: ReassignRelevanceBodyReassign;
}

/**
 * Assign Body
 * @export
 * @interface ReassignRelevanceBodyAssign
 */
export interface ReassignRelevanceBodyAssign {
    /**
     * Relevance Type
     * @type {string}
     * @memberof ReassignRelevanceBodyAssign
     */
    type: string;
    /**
     * First Ids of Relevance
     * @type {Array<string>}
     * @memberof ReassignRelevanceBodyAssign
     */
    firstIds?: Array<string>;
    /**
     * Second Ids of Relevance
     * @type {Array<string>}
     * @memberof ReassignRelevanceBodyAssign
     */
    secondIds?: Array<string>;
    /**
     * Third Ids of Relevance
     * @type {Array<string>}
     * @memberof ReassignRelevanceBodyAssign
     */
    thirdIds?: Array<string>;
}

/**
 * Reassign Body
 * @export
 * @interface ReassignRelevanceBodyReassign
 */
export interface ReassignRelevanceBodyReassign {
    /**
     * Relevance Type
     * @type {string}
     * @memberof ReassignRelevanceBodyReassign
     */
    type: string;
    /**
     * First Ids of Relevance
     * @type {Array<string>}
     * @memberof ReassignRelevanceBodyReassign
     */
    firstIds?: Array<string>;
    /**
     * Second Ids of Relevance
     * @type {Array<string>}
     * @memberof ReassignRelevanceBodyReassign
     */
    secondIds?: Array<string>;
    /**
     * Third Ids of Relevance
     * @type {Array<string>}
     * @memberof ReassignRelevanceBodyReassign
     */
    thirdIds?: Array<string>;
}

/**
 * 
 * @export
 * @interface Relevance
 */
export interface Relevance {
    /**
     * 
     * @type {string}
     * @memberof Relevance
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof Relevance
     */
    type?: string;
    /**
     * 
     * @type {string}
     * @memberof Relevance
     */
    firstId?: string;
    /**
     * 
     * @type {string}
     * @memberof Relevance
     */
    secondId?: string;
    /**
     * 
     * @type {string}
     * @memberof Relevance
     */
    thirdId?: string;
    /**
     * 
     * @type {string}
     * @memberof Relevance
     */
    createdUser?: string;
    /**
     * 
     * @type {Date}
     * @memberof Relevance
     */
    createdDate?: Date;
    /**
     * 
     * @type {string}
     * @memberof Relevance
     */
    updatedUser?: string;
    /**
     * 
     * @type {Date}
     * @memberof Relevance
     */
    updatedDate?: Date;
}

/**
 * 
 * @export
 * @interface UnassignRelevanceBody
 */
export interface UnassignRelevanceBody {
    /**
     * Relevance Type
     * @type {string}
     * @memberof UnassignRelevanceBody
     */
    type: string;
    /**
     * First Ids of Relevance
     * @type {Array<string>}
     * @memberof UnassignRelevanceBody
     */
    firstIds?: Array<string>;
    /**
     * Second Ids of Relevance
     * @type {Array<string>}
     * @memberof UnassignRelevanceBody
     */
    secondIds?: Array<string>;
    /**
     * Third Ids of Relevance
     * @type {Array<string>}
     * @memberof UnassignRelevanceBody
     */
    thirdIds?: Array<string>;
}


/**
 * OrdersApi - fetch parameter creator
 * @export
 */
export const OrdersApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Find Many Orders
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersGet(options: any = {}): FetchArgs {
            const localVarPath = `/orders`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Order By Id
         * @param {string} id Order Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersIdDelete(id: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling ordersIdDelete.');
            }
            const localVarPath = `/orders/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Find Order By Id
         * @param {string} id Order Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersIdGet(id: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling ordersIdGet.');
            }
            const localVarPath = `/orders/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Order By Id
         * @param {string} id Order Id
         * @param {OrderBody} body Order Body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersIdPut(id: string, body: OrderBody, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling ordersIdPut.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling ordersIdPut.');
            }
            const localVarPath = `/orders/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"OrderBody" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add Order
         * @param {OrderBody} body Order Body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersPost(body: OrderBody, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling ordersPost.');
            }
            const localVarPath = `/orders`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"OrderBody" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add Order With Patient
         * @param {PatientOrderBody} body Order Body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersWithPatientPost(body: PatientOrderBody, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling ordersWithPatientPost.');
            }
            const localVarPath = `/orders/withPatient`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"PatientOrderBody" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrdersApi - functional programming interface
 * @export
 */
export const OrdersApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Find Many Orders
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersGet(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Order>> {
            const localVarFetchArgs = OrdersApiFetchParamCreator(configuration).ordersGet(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Delete Order By Id
         * @param {string} id Order Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersIdDelete(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Order> {
            const localVarFetchArgs = OrdersApiFetchParamCreator(configuration).ordersIdDelete(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Find Order By Id
         * @param {string} id Order Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersIdGet(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Order> {
            const localVarFetchArgs = OrdersApiFetchParamCreator(configuration).ordersIdGet(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Update Order By Id
         * @param {string} id Order Id
         * @param {OrderBody} body Order Body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersIdPut(id: string, body: OrderBody, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Order> {
            const localVarFetchArgs = OrdersApiFetchParamCreator(configuration).ordersIdPut(id, body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Add Order
         * @param {OrderBody} body Order Body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersPost(body: OrderBody, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = OrdersApiFetchParamCreator(configuration).ordersPost(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Add Order With Patient
         * @param {PatientOrderBody} body Order Body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersWithPatientPost(body: PatientOrderBody, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Order> {
            const localVarFetchArgs = OrdersApiFetchParamCreator(configuration).ordersWithPatientPost(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * OrdersApi - factory interface
 * @export
 */
export const OrdersApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Find Many Orders
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersGet(options?: any) {
            return OrdersApiFp(configuration).ordersGet(options)(fetch, basePath);
        },
        /**
         * 
         * @summary Delete Order By Id
         * @param {string} id Order Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersIdDelete(id: string, options?: any) {
            return OrdersApiFp(configuration).ordersIdDelete(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Find Order By Id
         * @param {string} id Order Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersIdGet(id: string, options?: any) {
            return OrdersApiFp(configuration).ordersIdGet(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Update Order By Id
         * @param {string} id Order Id
         * @param {OrderBody} body Order Body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersIdPut(id: string, body: OrderBody, options?: any) {
            return OrdersApiFp(configuration).ordersIdPut(id, body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Add Order
         * @param {OrderBody} body Order Body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersPost(body: OrderBody, options?: any) {
            return OrdersApiFp(configuration).ordersPost(body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Add Order With Patient
         * @param {PatientOrderBody} body Order Body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersWithPatientPost(body: PatientOrderBody, options?: any) {
            return OrdersApiFp(configuration).ordersWithPatientPost(body, options)(fetch, basePath);
        },
    };
};

/**
 * OrdersApi - object-oriented interface
 * @export
 * @class OrdersApi
 * @extends {BaseAPI}
 */
export class OrdersApi extends BaseAPI {
    /**
     * 
     * @summary Find Many Orders
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    public ordersGet(options?: any) {
        return OrdersApiFp(this.configuration).ordersGet(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Delete Order By Id
     * @param {string} id Order Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    public ordersIdDelete(id: string, options?: any) {
        return OrdersApiFp(this.configuration).ordersIdDelete(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Find Order By Id
     * @param {string} id Order Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    public ordersIdGet(id: string, options?: any) {
        return OrdersApiFp(this.configuration).ordersIdGet(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Update Order By Id
     * @param {string} id Order Id
     * @param {OrderBody} body Order Body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    public ordersIdPut(id: string, body: OrderBody, options?: any) {
        return OrdersApiFp(this.configuration).ordersIdPut(id, body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Add Order
     * @param {OrderBody} body Order Body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    public ordersPost(body: OrderBody, options?: any) {
        return OrdersApiFp(this.configuration).ordersPost(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Add Order With Patient
     * @param {PatientOrderBody} body Order Body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    public ordersWithPatientPost(body: PatientOrderBody, options?: any) {
        return OrdersApiFp(this.configuration).ordersWithPatientPost(body, options)(this.fetch, this.basePath);
    }

}

/**
 * PatientsApi - fetch parameter creator
 * @export
 */
export const PatientsApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Find Many Patients
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patientsGet(options: any = {}): FetchArgs {
            const localVarPath = `/patients`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Patient By Id
         * @param {string} id Patient Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patientsIdDelete(id: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling patientsIdDelete.');
            }
            const localVarPath = `/patients/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Find Patient By Id
         * @param {string} id Patient Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patientsIdGet(id: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling patientsIdGet.');
            }
            const localVarPath = `/patients/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Patient By Id
         * @param {string} id Patient Id
         * @param {PatientBody} body Patient Body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patientsIdPut(id: string, body: PatientBody, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling patientsIdPut.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling patientsIdPut.');
            }
            const localVarPath = `/patients/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"PatientBody" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add Patient
         * @param {PatientBody} body Patient Body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patientsPost(body: PatientBody, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling patientsPost.');
            }
            const localVarPath = `/patients`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"PatientBody" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PatientsApi - functional programming interface
 * @export
 */
export const PatientsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Find Many Patients
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patientsGet(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<PatientWithOrders>> {
            const localVarFetchArgs = PatientsApiFetchParamCreator(configuration).patientsGet(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Delete Patient By Id
         * @param {string} id Patient Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patientsIdDelete(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Patient> {
            const localVarFetchArgs = PatientsApiFetchParamCreator(configuration).patientsIdDelete(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Find Patient By Id
         * @param {string} id Patient Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patientsIdGet(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Patient> {
            const localVarFetchArgs = PatientsApiFetchParamCreator(configuration).patientsIdGet(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Update Patient By Id
         * @param {string} id Patient Id
         * @param {PatientBody} body Patient Body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patientsIdPut(id: string, body: PatientBody, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Patient> {
            const localVarFetchArgs = PatientsApiFetchParamCreator(configuration).patientsIdPut(id, body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Add Patient
         * @param {PatientBody} body Patient Body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patientsPost(body: PatientBody, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Patient> {
            const localVarFetchArgs = PatientsApiFetchParamCreator(configuration).patientsPost(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * PatientsApi - factory interface
 * @export
 */
export const PatientsApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Find Many Patients
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patientsGet(options?: any) {
            return PatientsApiFp(configuration).patientsGet(options)(fetch, basePath);
        },
        /**
         * 
         * @summary Delete Patient By Id
         * @param {string} id Patient Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patientsIdDelete(id: string, options?: any) {
            return PatientsApiFp(configuration).patientsIdDelete(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Find Patient By Id
         * @param {string} id Patient Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patientsIdGet(id: string, options?: any) {
            return PatientsApiFp(configuration).patientsIdGet(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Update Patient By Id
         * @param {string} id Patient Id
         * @param {PatientBody} body Patient Body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patientsIdPut(id: string, body: PatientBody, options?: any) {
            return PatientsApiFp(configuration).patientsIdPut(id, body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Add Patient
         * @param {PatientBody} body Patient Body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patientsPost(body: PatientBody, options?: any) {
            return PatientsApiFp(configuration).patientsPost(body, options)(fetch, basePath);
        },
    };
};

/**
 * PatientsApi - object-oriented interface
 * @export
 * @class PatientsApi
 * @extends {BaseAPI}
 */
export class PatientsApi extends BaseAPI {
    /**
     * 
     * @summary Find Many Patients
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PatientsApi
     */
    public patientsGet(options?: any) {
        return PatientsApiFp(this.configuration).patientsGet(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Delete Patient By Id
     * @param {string} id Patient Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PatientsApi
     */
    public patientsIdDelete(id: string, options?: any) {
        return PatientsApiFp(this.configuration).patientsIdDelete(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Find Patient By Id
     * @param {string} id Patient Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PatientsApi
     */
    public patientsIdGet(id: string, options?: any) {
        return PatientsApiFp(this.configuration).patientsIdGet(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Update Patient By Id
     * @param {string} id Patient Id
     * @param {PatientBody} body Patient Body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PatientsApi
     */
    public patientsIdPut(id: string, body: PatientBody, options?: any) {
        return PatientsApiFp(this.configuration).patientsIdPut(id, body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Add Patient
     * @param {PatientBody} body Patient Body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PatientsApi
     */
    public patientsPost(body: PatientBody, options?: any) {
        return PatientsApiFp(this.configuration).patientsPost(body, options)(this.fetch, this.basePath);
    }

}

/**
 * RelevancesApi - fetch parameter creator
 * @export
 */
export const RelevancesApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Assign Relevances
         * @param {AssignRelevanceBody} body Assign Relevance Body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        relevancesAssignPut(body: AssignRelevanceBody, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling relevancesAssignPut.');
            }
            const localVarPath = `/relevances/assign`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"AssignRelevanceBody" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Reassign Relevances
         * @param {ReassignRelevanceBody} body Reassign Relevance Body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        relevancesReassignPut(body: ReassignRelevanceBody, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling relevancesReassignPut.');
            }
            const localVarPath = `/relevances/reassign`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"ReassignRelevanceBody" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Unassign Relevances
         * @param {UnassignRelevanceBody} body Unassign Relevance Body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        relevancesUnassignPut(body: UnassignRelevanceBody, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling relevancesUnassignPut.');
            }
            const localVarPath = `/relevances/unassign`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UnassignRelevanceBody" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RelevancesApi - functional programming interface
 * @export
 */
export const RelevancesApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Assign Relevances
         * @param {AssignRelevanceBody} body Assign Relevance Body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        relevancesAssignPut(body: AssignRelevanceBody, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Relevance>> {
            const localVarFetchArgs = RelevancesApiFetchParamCreator(configuration).relevancesAssignPut(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Reassign Relevances
         * @param {ReassignRelevanceBody} body Reassign Relevance Body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        relevancesReassignPut(body: ReassignRelevanceBody, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse200> {
            const localVarFetchArgs = RelevancesApiFetchParamCreator(configuration).relevancesReassignPut(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Unassign Relevances
         * @param {UnassignRelevanceBody} body Unassign Relevance Body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        relevancesUnassignPut(body: UnassignRelevanceBody, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<number> {
            const localVarFetchArgs = RelevancesApiFetchParamCreator(configuration).relevancesUnassignPut(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * RelevancesApi - factory interface
 * @export
 */
export const RelevancesApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Assign Relevances
         * @param {AssignRelevanceBody} body Assign Relevance Body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        relevancesAssignPut(body: AssignRelevanceBody, options?: any) {
            return RelevancesApiFp(configuration).relevancesAssignPut(body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Reassign Relevances
         * @param {ReassignRelevanceBody} body Reassign Relevance Body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        relevancesReassignPut(body: ReassignRelevanceBody, options?: any) {
            return RelevancesApiFp(configuration).relevancesReassignPut(body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Unassign Relevances
         * @param {UnassignRelevanceBody} body Unassign Relevance Body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        relevancesUnassignPut(body: UnassignRelevanceBody, options?: any) {
            return RelevancesApiFp(configuration).relevancesUnassignPut(body, options)(fetch, basePath);
        },
    };
};

/**
 * RelevancesApi - object-oriented interface
 * @export
 * @class RelevancesApi
 * @extends {BaseAPI}
 */
export class RelevancesApi extends BaseAPI {
    /**
     * 
     * @summary Assign Relevances
     * @param {AssignRelevanceBody} body Assign Relevance Body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RelevancesApi
     */
    public relevancesAssignPut(body: AssignRelevanceBody, options?: any) {
        return RelevancesApiFp(this.configuration).relevancesAssignPut(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Reassign Relevances
     * @param {ReassignRelevanceBody} body Reassign Relevance Body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RelevancesApi
     */
    public relevancesReassignPut(body: ReassignRelevanceBody, options?: any) {
        return RelevancesApiFp(this.configuration).relevancesReassignPut(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Unassign Relevances
     * @param {UnassignRelevanceBody} body Unassign Relevance Body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RelevancesApi
     */
    public relevancesUnassignPut(body: UnassignRelevanceBody, options?: any) {
        return RelevancesApiFp(this.configuration).relevancesUnassignPut(body, options)(this.fetch, this.basePath);
    }

}

